[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Sagatro mechanics
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''

if G.GAME.story_mode then
    if v.set == 'Joker' then
        -- Sagatro jokers only
        if not v.saga_group then add = nil end
        
        -- Events that would alter joker pool (should be paired with modifications of G.GAME.rarity_mod)
        for story, events in pairs(G.GAME.saga_event) do    
            for event, happening in pairs(events) do
                if happening then
                    if G.GAME.saga_spawn_table[story][event]
                    and type(G.GAME.saga_spawn_table[story][event]) == "table"
                    and #G.GAME.saga_spawn_table[story][event] > 0 then
                        add = nil
                        for _, key in pairs(G.GAME.saga_spawn_table[story][event]) do
                            if not (G.GAME.used_jokers[v.key] and not pool_opts.allow_duplicates and not SMODS.showman(v.key))
                            and v.unlocked ~= false and v.key == key then
                                add = true
                            end
                        end
                    end
                end
            end
        end
    end
else
    if v.set == 'Joker' then
        if G.GAME.modifiers.sgt_disable_sagatro_items and v.saga_group then
            add = nil
        end
    end
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _type == 'Joker' then _pool[#_pool + 1] = "j_joker"'''
position = "at"
payload = '''
elseif _type == 'Joker' then
    if G.GAME.story_mode then
        if G.GAME.saga_event.alice_in_wonderland.cry_into_flood then
            _pool[#_pool + 1] = "j_splash"
        elseif G.GAME.saga_event.alice_in_wonderland.goodbye_frog then
            _pool[#_pool + 1] = "j_sgt_cheshire_cat"
        elseif G.GAME.saga_event.alice_in_wonderland.mad_hatter then
            _pool[#_pool + 1] = "j_sgt_tea"
        else
            _pool[#_pool + 1] = "j_sgt_white_rabbit"
        end
    elseif next(SMODS.find_card("j_sgt_mad_hatter")) then
        _pool[#_pool + 1] = "j_sgt_tea"
    -- This redundancy is to allow other mods to find the same pattern
    elseif _type == 'Joker' then _pool[#_pool + 1] = "j_joker"
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _pool_size == 0 then'''
position = "before"
payload = '''
if _type == "Joker" and Sagatro.debug then print(_pool_size.."/"..#_starting_pool, _pool_key) end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''else _pool[#_pool + 1] = "j_joker"'''
position = "at"
payload = '''
else
    if G.GAME.story_mode then
        if G.GAME.saga_event.alice_in_wonderland.cry_into_flood then
            _pool[#_pool + 1] = "j_splash"
        elseif G.GAME.saga_event.alice_in_wonderland.goodbye_frog then
            _pool[#_pool + 1] = "j_sgt_cheshire_cat"
        elseif G.GAME.saga_event.alice_in_wonderland.mad_hatter then
            _pool[#_pool + 1] = "j_sgt_tea"
        else
            _pool[#_pool + 1] = "j_sgt_white_rabbit"
        end
    elseif next(SMODS.find_card("j_sgt_mad_hatter", true)) then
        _pool[#_pool + 1] = "j_sgt_tea"
    else _pool[#_pool + 1] = "j_joker"
    end
'''
match_indent = true

# Emult
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local extrafunc = nil"
position = "after"
payload = '''
if eval_type == 'sgt_e_mult' then 
    sound = 'sgt_emult'
    amt = amt
    text = '^' .. amt .. " " .. localize("k_mult")
    colour = G.C.DARK_EDITION
    config.type = 'fade'
    config.scale = 0.7
end
'''
match_indent = true

# The Cook patches (stolen from Bunco's Vandalism)
[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == 'The Wheel' and SMODS.pseudorandom_probability(self, pseudoseed('wheel'), 1, 7, 'wheel') then'''
position = 'before'
match_indent = true
payload = '''
if G.jokers then
    for _, v in ipairs(G.jokers.cards) do
        if v.config.center_key == 'j_sgt_the_cook' and not v.debuff then
            if (SMODS.pseudorandom_probability(v, 'thecook'..G.SEED, 1, v.ability.extra.odds, 'thecook')) and (G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.DRAW_TO_HAND) then
                SMODS.calculate_context({sgt_stay_flipped = true})
                return true
            end
        end
    end
end
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''--check the hand first'''
position = 'after'
match_indent = true
payload = '''

if G.jokers then
    for _, v in ipairs(G.jokers.cards) do
        if v.config.center.key == 'j_sgt_the_cook' and not v.debuff then
            SMODS.calculate_context({sgt_play_cards = true})
        end
    end
end

'''

# Mad Hatter patches to disable Up the Ante
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''delay\(0\.4\);.* ease_ante\('''
position = 'before'
payload = '''if not (next(SMODS.find_card("j_sgt_mad_hatter")) or mabel_stall()) then '''

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''G\.GAME\.round_resets\.ante \+ 1}\)'''
position = 'after'
payload = ''' end'''

[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = '''elseif [type == 'Boss' and ]*not run_info then'''
position = 'at'
payload = '''elseif type == 'Boss' and not run_info and not (next(SMODS.find_card("j_sgt_mad_hatter")) or mabel_stall()) then'''

# Force win if Red Queen is defeated
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss' then'''
position = 'at'
match_indent = true
payload = '''
if (not G.GAME.story_mode and G.GAME.round_resets.ante >= G.GAME.win_ante and G.GAME.blind_on_deck == 'Boss')
or (G.GAME.story_mode and G.GAME.blind.config.blind.key == "bl_sgt_red_queen") then
'''

# Make losing after Red Queen but before win Ante a valid endless run
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.round_resets.ante <= G.GAME.win_ante then'''
position = 'at'
match_indent = true
payload = '''
if (not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated) then
'''

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.round_resets.ante <= G.GAME.win_ante then --Only add Jimbo to say a quip if the game over happens when the run is lost'''
position = 'at'
match_indent = true
payload = '''
-- Only add Jimbo (or Alice if in story mode) to say a quip if the game over happens when the run is lost
if (not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated) then
'''

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''local eased_red = copy_table(G.GAME.round_resets.ante <= G.GAME.win_ante and G.C.RED or G.C.BLUE)'''
position = 'at'
match_indent = true
payload = '''
local eased_red = copy_table(((not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated)) and G.C.RED or G.C.BLUE)
'''

# Replace YOU WIN! with STORY ENDED! if Red Queen is defeated
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {localize('ph_you_win')}, colours = {G.C.EDITION},shadow = true, float = true, spacing = 10, rotate = true, scale = 1.5, pop_in = 0.4, maxw = 6.5})}},'''
position = 'at'
match_indent = true
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {G.GAME.story_mode and G.GAME.blind.config.blind.key == "bl_sgt_red_queen" and localize('ph_story_ended') or localize('ph_you_win')}, colours = {G.C.EDITION},shadow = true, float = true, spacing = 10, rotate = true, scale = 1.5, pop_in = 0.4, maxw = 6.5})}},
'''

# Replace Jimbo with Alice (still allowing Joseph if Cryptid is also installed)
# Use SMODS.JimboQuip instead if it's present
[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'self.children.card.states.visible = false'
position = "before"
payload = '''
if SMODS and not SMODS.JimboQuip then
    self.children.card:set_ability(G.P_CENTERS[G.GAME.story_mode and "j_sgt_alice" or Cryptid and "j_jolly" or "j_joker"])
end
self.children.card:set_debuff(false)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'colours = {G.C.RED, G.C.BLUE, G.C.ORANGE},'
position = "at"
payload = '''
colours = G.GAME.story_mode
and {Sagatro.badge_colour, G.C.BLUE, G.C.RARITY[4]}
or {G.C.RED, G.C.BLUE, G.C.ORANGE},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'colours = {G.C.CRY_EXOTIC, G.C.BLUE, G.C.CRY_JOLLY},'
position = "at" # Overrides Cryptid
payload = '''
colours = G.GAME.story_mode
and {Sagatro.badge_colour, G.C.BLUE, G.C.RARITY[4]}
or {G.C.CRY_EXOTIC, G.C.BLUE, G.C.CRY_JOLLY},
'''
match_indent = true

# Alice invades Splash screen
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "after"
payload = '''
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_sgt_alice'],{bypass_discovery_center = true, bypass_discovery_ui = true})
'''
match_indent = true

# Add a "Delete Ace" button in options in menu
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
if G.STAGE == G.STAGES.MAIN_MENU then
  credits = UIBox_button{ label = {localize('b_credits')}, button = "show_credits", minw = 5}
end
'''
position = "at"
payload = '''
local delete_ace = nil

if G.STAGE == G.STAGES.MAIN_MENU then
  credits = UIBox_button{ label = {localize('b_credits')}, button = "show_credits", minw = 5}
  delete_ace = UIBox_button{id = 'sgt_delete_ace', label = {localize('b_delete_ace')}, button = "delete_ace_in_menu", minw = 5}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
customize,
credits
'''
position = "at"
payload = '''
customize,
credits,
delete_ace
'''
match_indent = true

# I don't like buffed Aladdin evaluating G.C.BLUE with Xmult sfx
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
end
if extra.chip_mod or extra.Xchip_mod then
'''
position = "at"
payload = '''
elseif extra.chip_mod or extra.Xchip_mod then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if not extra.edition and (extra.mult_mod or extra.Xmult_mod)  then
    colour = G.C.MULT
'''
position = "after"
payload = '''
    config.type = 'fall'
    config.scale = 0.7
'''
match_indent = true

# Pufferfish debuffing adjacent jokers would be too dangerous if it constantly debuffs and undebuffs jokers that add hand size
# This patch aims to fix that, but also removes Beanstalk trick to get naneinf
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''
if delta > 0 and self.config.real_card_limit > 1 and self == G.hand and self.cards[1] and (G.STATE == G.STATES.DRAW_TO_HAND or G.STATE == G.STATES.SELECTING_HAND) then 
    local card_count = math.abs(delta)
'''
position = "at"
payload = '''
if delta > 0 and self.config.real_card_limit > 1 and self == G.hand and self.cards[1]
and (G.STATE == G.STATES.DRAW_TO_HAND or G.STATE == G.STATES.SELECTING_HAND)
and #self.cards < self.config.card_limit then
    local card_count = self.config.card_limit - #self.cards
'''
match_indent = true

# Submarine adds custom background colour in story mode
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '' then'''
position = "before"
payload = '''
elseif G.GAME.story_mode and next(SMODS.find_card("j_sgt_submarine", true)) then
    ease_background_colour{new_colour = G.C.SUBMARINE_DEPTH[Sagatro.get_submarine_depth_colour()], contrast = 1}
'''
match_indent = true

# Force boss blinds if Ragnarok is present
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.round_resets.blind_choices.Boss = get_new_boss()'''
position = "at"
payload = '''
if next(SMODS.find_card("j_sgt_ragnarok")) then
    local small_hide = G.GAME.round_resets.blind_states.Small == 'Hide'
    local big_hide = G.GAME.round_resets.blind_states.Big == 'Hide'
    G.GAME.round_resets.blind_choices.Small = not small_hide and get_new_boss()
    G.GAME.round_resets.blind_choices.Big = not big_hide and get_new_boss()
    G.GAME.round_resets.blind_choices.Boss = Sagatro.get_new_showdown()
else
    G.GAME.round_resets.blind_choices.Boss = get_new_boss()
end
'''
match_indent = true

# Patches to make sure defeating bosses replacing Small/Big Blind won't increment Ante or reset blind states
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.blind:get_type() == 'Boss' then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Boss' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then"
position = "at"
payload = "if G.GAME.blind_on_deck == 'Small' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "elseif G.GAME.round_resets.blind == G.P_BLINDS.bl_big then"
position = "at"
payload = "elseif G.GAME.blind_on_deck == 'Big' then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss' then"
position = "at"
payload = "if G.GAME.round_resets.ante >= G.GAME.win_ante and G.GAME.blind_on_deck == 'Boss' then"
match_indent = true

# Challenge-related patches
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = "if type == 'Small' "
position = "after"
payload = "and not G.GAME.modifiers.sgt_no_tags "

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = "elseif type == 'Big' "
position = "after"
payload = "and not G.GAME.modifiers.sgt_no_tags "

# Omnicient behaves like every vanilla enhancement
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "-- TARGET: get_chip_mult"
position = "after"
payload = '''
if self.ability.effect == "Omnicient" then
    self.lucky_trigger = true
end
'''
match_indent = true

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''SMODS\.has_enhancement'''
position = "at"
payload = '''Sagatro.omniscient'''

# Upgraded enhancements behave like their original counterparts
[[patches]]
[patches.regex]
target = "card.lua"
pattern = "'m_glass'"
position = "at"
payload = "{'m_glass', 'm_sgt_nyx_glass'}"

[[patches]]
[patches.regex]
target = "card.lua"
pattern = "'m_steel'"
position = "at"
payload = "{'m_steel', 'm_sgt_titanium'}"

[[patches]]
[patches.regex]
target = "card.lua"
pattern = "'m_stone'"
position = "at"
payload = "{'m_stone', 'm_sgt_abyss_stone'}"

[[patches]]
[patches.regex]
target = "card.lua"
pattern = "'m_gold'"
position = "at"
payload = "{'m_gold', 'm_sgt_platinum'}"

# Damn you Incantation for completely overriding set_consumeable_usage, I'm moving to Overflow
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.GAME.consumeable_usage_total = G.GAME.consumeable_usage_total or {tarot = 0, planet = 0, spectral = 0, tarot_planet = 0, all = 0}"
position = "after"
payload = '''
-- G.GAME.consumeable_usage_total.tarot_planet_divinatio_celestara = G.GAME.consumeable_usage_total.tarot_planet_divinatio_celestara or 0
-- if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet'
-- or card.config.center.set == 'Divinatio' or card.config.center.set == 'Celestara' then
--   G.GAME.consumeable_usage_total.tarot_planet_divinatio_celestara = G.GAME.consumeable_usage_total.tarot_planet_divinatio_celestara + 1
-- end
if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet'
or (card.config.center.set == 'Divinatio' and card.config.center_key ~= 'c_sgt_anima')
or (card.config.center.set == 'Celestara' and card.config.center_key ~= 'c_sgt_soltera') then
  G.E_MANAGER:add_event(Event({
    trigger = 'immediate',
    func = function()
    G.E_MANAGER:add_event(Event({
      trigger = 'immediate',
      func = function()
        G.GAME.last_tarot_planet_divinatio_celestara = card.config.center_key
      return true
      end
    }))
    return true
    end
  }))
end

'''
match_indent = true

# Ortalab collab... Ig?
[[patches]]
[patches.pattern]
target = '=[SMODS ortalab "util/menu.lua"]'
pattern = '''
G.SPLASH_LOGO = Sprite(0, 0, 
    13*SC_scale, 
    13*SC_scale*(G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"].py/G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"].px),
    G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"], {x=0,y=0})
'''
position = "at"
payload = '''
G.SPLASH_LOGO = Sprite(0, 0, 
    13*SC_scale, 
    13*SC_scale*(G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"].py/G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"].px),
    G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"], {x=0,y=0})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
G.SPLASH_LOGO = Sprite(0, 0, 
    13*SC_scale, 
    13*SC_scale*(G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"].py/G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"].px),
    G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_logo' or "balatro"], {x=0,y=0})
'''
position = "at"
payload = '''
G.SPLASH_LOGO = Sprite(0, 0, 
    13*SC_scale, 
    13*SC_scale*(G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"].py/G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"].px),
    G.ASSET_ATLAS[Ortalab.config.menu_toggle and 'ortalab_'..(Sagatro.config.Ortagas and 'alt_' or '')..'logo' or "balatro"], {x=0,y=0})
'''
match_indent = true

# Patch to softlock Celestara cards for secret hands
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
elseif v.set == 'Planet' then
'''
position = "before"
payload = '''
elseif v.set == 'Celestara' then
    if (not v.config.softlock or G.GAME.hands[v.config.hand_type].played > 0) then
        add = true
    end
'''
match_indent = true