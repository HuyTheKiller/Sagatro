[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Sagatro mechanics
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''

if G.GAME.story_mode then
    if v.set == 'Joker' then
        -- Sagatro jokers only
        if not v.saga_group then add = nil end
        
        -- Events that would alter joker pool (should be paired with modifications of G.GAME.rarity_mod)
        for story, events in pairs(G.GAME.saga_event) do    
            for event, happening in pairs(events) do
                if happening then
                    if G.GAME.saga_spawn_table[story][event]
                    and type(G.GAME.saga_spawn_table[story][event]) == "table"
                    and #G.GAME.saga_spawn_table[story][event] > 0 then
                        add = nil
                        for _, key in pairs(G.GAME.saga_spawn_table[story][event]) do
                            if not (G.GAME.used_jokers[v.key] and not pool_opts.allow_duplicates and not next(find_joker("Showman")))
                            and v.unlocked ~= false and v.key == key then
                                add = true
                            end
                        end
                    end
                end
            end
        end
    end
else
    if v.set == 'Joker' and next(SMODS.find_card("j_sgt_mad_hatter")) then
        add = nil
        for _, key in pairs({"j_sgt_tea", "j_sgt_bread", "j_sgt_butter"}) do
            if not (G.GAME.used_jokers[v.key] and not pool_opts.allow_duplicates and not next(find_joker("Showman")))
            and v.unlocked ~= false and v.key == key then
                add = true
            end
        end
    end
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''elseif _type == 'Joker' then _pool[#_pool + 1] = "j_joker"'''
position = "at"
payload = '''
elseif _type == 'Joker' then
    if G.GAME.story_mode then
        if G.GAME.saga_event.alice_in_wonderland.cry_into_flood then
            _pool[#_pool + 1] = "j_splash"
        elseif G.GAME.saga_event.alice_in_wonderland.goodbye_frog then
            _pool[#_pool + 1] = "j_sgt_cheshire_cat"
        elseif G.GAME.saga_event.alice_in_wonderland.mad_hatter then
            _pool[#_pool + 1] = "j_sgt_tea"
        else
            _pool[#_pool + 1] = "j_sgt_white_rabbit"
        end
    elseif next(SMODS.find_card("j_sgt_mad_hatter")) then
        _pool[#_pool + 1] = "j_sgt_tea"
    -- This redundancy is to allow other mods to find the same pattern
    elseif _type == 'Joker' then _pool[#_pool + 1] = "j_joker"
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _pool_size == 0 then'''
position = "before"
payload = '''
if _type == "Joker" and Sagatro.debug then print(_pool_size.."/"..#_starting_pool, _pool_key) end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''else _pool[#_pool + 1] = "j_joker"'''
position = "at"
payload = '''
else
    if G.GAME.story_mode then
        if G.GAME.saga_event.alice_in_wonderland.cry_into_flood then
            _pool[#_pool + 1] = "j_splash"
        elseif G.GAME.saga_event.alice_in_wonderland.goodbye_frog then
            _pool[#_pool + 1] = "j_sgt_cheshire_cat"
        elseif G.GAME.saga_event.alice_in_wonderland.mad_hatter then
            _pool[#_pool + 1] = "j_sgt_tea"
        else
            _pool[#_pool + 1] = "j_sgt_white_rabbit"
        end
    elseif next(SMODS.find_card("j_sgt_mad_hatter", true)) then
        _pool[#_pool + 1] = "j_sgt_tea"
    else _pool[#_pool + 1] = "j_joker"
    end
'''
match_indent = true

# Emult
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local extrafunc = nil"
position = "after"
payload = '''
if not (SMODS.Mods["Talisman"] or {}).can_load
and not (SMODS.Mods["Buffoonery"] or {}).can_load
and not (SMODS.Mods["Prism"] or {}).can_load then
	if eval_type == 'e_mult' then 
		sound = 'sgt_emult'
		amt = amt
		text = '^' .. amt .. " " .. localize("k_mult")
		colour = G.C.DARK_EDITION
		config.type = 'fade'
		config.scale = 0.7
	end
end
'''
match_indent = true

# The Cook patches (stolen from Bunco's Vandalism)
[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == 'The Wheel' and pseudorandom(pseudoseed('wheel')) < G.GAME.probabilities.normal/7 then'''
position = 'before'
match_indent = true
payload = '''

if G.jokers then
    for _, v in ipairs(G.jokers.cards) do
        if v.config.center_key == 'j_sgt_the_cook' and not v.debuff then
            if (pseudorandom('thecook'..G.SEED) < G.GAME.probabilities.normal/v.ability.extra.odds) and (G.STATE == G.STATES.SELECTING_HAND or G.STATE == G.STATES.DRAW_TO_HAND) then
                SMODS.calculate_context({sgt_stay_flipped = true})
                return true
            end
        end
    end
end

'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''--check the hand first'''
position = 'after'
match_indent = true
payload = '''

if G.jokers then
    for _, v in ipairs(G.jokers.cards) do
        if v.config.center.key == 'j_sgt_the_cook' and not v.debuff then
            SMODS.calculate_context({sgt_play_cards = true})
        end
    end
end

'''

# Mad Hatter patches to disable Up the Ante
[[patches]]
[patches.pattern]
match_indent = true
target = 'functions/state_events.lua'
pattern = '''delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})'''
position = 'at'
payload = '''
if not next(SMODS.find_card("j_sgt_mad_hatter")) then
    delay(0.4); ease_ante(1); delay(0.4); check_for_unlock({type = 'ante_up', ante = G.GAME.round_resets.ante + 1})
end
'''

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''elseif not run_info then'''
position = 'at'
match_indent = true
payload = '''
elseif not run_info and not next(SMODS.find_card("j_sgt_mad_hatter")) then
'''

# Force win if Red Queen is defeated
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss' then'''
position = 'at'
match_indent = true
payload = '''
if (not G.GAME.story_mode and G.GAME.round_resets.ante == G.GAME.win_ante and G.GAME.blind:get_type() == 'Boss')
or (G.GAME.story_mode and G.GAME.blind.config.blind.key == "bl_sgt_red_queen") then
'''

# Make losing after Red Queen but before win Ante a valid endless run
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.round_resets.ante <= G.GAME.win_ante then'''
position = 'at'
match_indent = true
payload = '''
if (not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated) then
'''

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if G.GAME.round_resets.ante <= G.GAME.win_ante then --Only add Jimbo to say a quip if the game over happens when the run is lost'''
position = 'at'
match_indent = true
payload = '''
-- Only add Jimbo (or Alice if in story mode) to say a quip if the game over happens when the run is lost
if (not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated) then
'''

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''local eased_red = copy_table(G.GAME.round_resets.ante <= G.GAME.win_ante and G.C.RED or G.C.BLUE)'''
position = 'at'
match_indent = true
payload = '''
local eased_red = copy_table(((not G.GAME.story_mode and G.GAME.round_resets.ante <= G.GAME.win_ante)
or (G.GAME.story_mode and not G.GAME.red_queen_defeated)) and G.C.RED or G.C.BLUE)
'''

# Replace YOU WIN! with STORY ENDED! if Red Queen is defeated
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {localize('ph_you_win')}, colours = {G.C.EDITION},shadow = true, float = true, spacing = 10, rotate = true, scale = 1.5, pop_in = 0.4, maxw = 6.5})}},'''
position = 'at'
match_indent = true
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {G.GAME.story_mode and G.GAME.blind.config.blind.key == "bl_sgt_red_queen" and localize('ph_story_ended') or localize('ph_you_win')}, colours = {G.C.EDITION},shadow = true, float = true, spacing = 10, rotate = true, scale = 1.5, pop_in = 0.4, maxw = 6.5})}},
'''


# Replace Jimbo with Alice (still allowing Joseph if Cryptid is also installed)
[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'self.children.card.states.visible = false'
position = "before"
payload = '''
self.children.card:set_ability(G.P_CENTERS[G.GAME.story_mode and "j_sgt_alice" or Cryptid and "j_jolly" or "j_joker"])
self.children.card:set_debuff(false)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'colours = {G.C.RED, G.C.BLUE, G.C.ORANGE},'
position = "at"
payload = '''
colours = G.GAME.story_mode
and {Sagatro.badge_colour, G.C.BLUE, G.C.RARITY[4]}
or {G.C.RED, G.C.BLUE, G.C.ORANGE},
'''
match_indent = true

# Overrides Cryptid
[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'colours = {G.C.CRY_EXOTIC, G.C.BLUE, G.C.CRY_JOLLY},'
position = "at"
payload = '''
colours = G.GAME.story_mode
and {Sagatro.badge_colour, G.C.BLUE, G.C.RARITY[4]}
or {G.C.CRY_EXOTIC, G.C.BLUE, G.C.CRY_JOLLY},
'''
match_indent = true

# Alice invades Splash screen
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "after"
payload = '''
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_sgt_alice'],{bypass_discovery_center = true, bypass_discovery_ui = true})
'''
match_indent = true